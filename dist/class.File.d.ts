/// <reference types="node" />
import { IFile } from "./interface.IFile";
declare class File implements IFile {
    protected _fd: number;
    protected _pos: number;
    protected _path: string;
    constructor(fd: number, path: string, pos?: number);
    close(): Promise<void>;
    tell(): number;
    seek(newPos: number): File;
    forward(posDulta: number): File;
    read(size: number): Promise<Buffer>;
    readInt8(): Promise<number>;
    readUInt8(): Promise<number>;
    readInt16(): Promise<number>;
    readUInt16(): Promise<number>;
    readInt16BE(): Promise<number>;
    readUInt16BE(): Promise<number>;
    readInt32(): Promise<number>;
    readUInt32(): Promise<number>;
    readInt32BE(): Promise<number>;
    readUInt32BE(): Promise<number>;
    readInt64(): Promise<number>;
    readUInt64(): Promise<number>;
    readInt64BE(): Promise<number>;
    readUInt64BE(): Promise<number>;
    readFloat(): Promise<number>;
    readFloatBE(): Promise<number>;
    readDouble(): Promise<number>;
    readDoubleBE(): Promise<number>;
    writeInt8(val: number): Promise<void>;
    writeUInt8(val: number): Promise<void>;
    writeInt16(val: number): Promise<void>;
    writeInt16BE(val: number): Promise<void>;
    writeUInt16(val: number): Promise<void>;
    writeUInt16BE(val: number): Promise<void>;
    writeInt32(val: number): Promise<void>;
    writeInt32BE(val: number): Promise<void>;
    writeUInt32(val: number): Promise<void>;
    writeUInt32BE(val: number): Promise<void>;
    writeInt64(val: number): Promise<void>;
    writeInt64BE(val: number): Promise<void>;
    writeUInt64(val: number): Promise<void>;
    writeUInt64BE(val: number): Promise<void>;
    writeFloat(val: number): Promise<void>;
    writeFloatBE(val: number): Promise<void>;
    writeDouble(val: number): Promise<void>;
    writeDoubleBE(val: number): Promise<void>;
    writeString(data: string, encode?: string): Promise<number>;
    write(data: Buffer, size: number): Promise<number>;
    readAll(): Promise<Buffer>;
    static open(path: string, method?: string): Promise<IFile>;
    static exists(path: string): Promise<boolean>;
    static getSize(path: string): Promise<number>;
    static delete(path: string): Promise<void>;
    static readFile(path: string): Promise<Buffer>;
    static writeFile(path: string, data: Buffer): Promise<void>;
}
export = File;
